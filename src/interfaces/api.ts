/* tslint:disable */
/* eslint-disable */
/**
 * Code Unity Challenge
 * Open API definition
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Card
 */
export interface Card {
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'attackName': string;
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'attackValue': number;
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'hp': number;
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'typeId': number;
    /**
     * 
     * @type {Type}
     * @memberof Card
     */
    'type'?: Type;
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'weaknessValue': number;
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'weaknessTypeId': number;
    /**
     * 
     * @type {Type}
     * @memberof Card
     */
    'weaknessType'?: Type;
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'resistanceValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'resistanceTypeId'?: number;
    /**
     * 
     * @type {Type}
     * @memberof Card
     */
    'resistanceType'?: Type;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'expansion': string;
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'rarityId': number;
    /**
     * 
     * @type {Rarity}
     * @memberof Card
     */
    'rarity'?: Rarity;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'imageURL'?: string;
}
/**
 * 
 * @export
 * @interface CardResponse
 */
export interface CardResponse {
    /**
     * 
     * @type {Card}
     * @memberof CardResponse
     */
    'data': Card;
}
/**
 * 
 * @export
 * @interface CardStatsResponse
 */
export interface CardStatsResponse {
    /**
     * 
     * @type {CardStatsResponseData}
     * @memberof CardStatsResponse
     */
    'data': CardStatsResponseData;
}
/**
 * 
 * @export
 * @interface CardStatsResponseData
 */
export interface CardStatsResponseData {
    /**
     * 
     * @type {Card}
     * @memberof CardStatsResponseData
     */
    'card'?: Card;
    /**
     * 
     * @type {Array<Card>}
     * @memberof CardStatsResponseData
     */
    'weaknesses'?: Array<Card>;
    /**
     * 
     * @type {Array<Card>}
     * @memberof CardStatsResponseData
     */
    'resistances'?: Array<Card>;
}
/**
 * 
 * @export
 * @interface CardsResponse
 */
export interface CardsResponse {
    /**
     * 
     * @type {Array<Card>}
     * @memberof CardsResponse
     */
    'data': Array<Card>;
}
/**
 * 
 * @export
 * @interface Fight
 */
export interface Fight {
    /**
     * 
     * @type {boolean}
     * @memberof Fight
     */
    'winner': boolean;
}
/**
 * 
 * @export
 * @interface FightResponse
 */
export interface FightResponse {
    /**
     * 
     * @type {Fight}
     * @memberof FightResponse
     */
    'data': Fight;
}
/**
 * 
 * @export
 * @interface Rarity
 */
export interface Rarity {
    /**
     * 
     * @type {number}
     * @memberof Rarity
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Rarity
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Type
 */
export interface Type {
    /**
     * 
     * @type {number}
     * @memberof Type
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Type
     */
    'name'?: string;
}

/**
 * CardsApi - axios parameter creator
 * @export
 */
export const CardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete card by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardById: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cards/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get card by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cards/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get card stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cards/{id}/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all cards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCards: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCard: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update card by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCardById: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cards/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardsApi - functional programming interface
 * @export
 */
export const CardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete card by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCardById(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCardById(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsApi.deleteCardById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get card by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardById(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardById(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsApi.getCardById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get card stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsApi.getCardStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all cards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCards(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCards(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsApi.getCards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create new card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCard(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCard(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsApi.postCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update card by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCardById(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCardById(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsApi.updateCardById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CardsApi - factory interface
 * @export
 */
export const CardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete card by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardById(options?: any): AxiosPromise<void> {
            return localVarFp.deleteCardById(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get card by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById(options?: any): AxiosPromise<CardResponse> {
            return localVarFp.getCardById(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get card stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardStats(options?: any): AxiosPromise<CardStatsResponse> {
            return localVarFp.getCardStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all cards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCards(options?: any): AxiosPromise<CardsResponse> {
            return localVarFp.getCards(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCard(options?: any): AxiosPromise<CardResponse> {
            return localVarFp.postCard(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update card by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCardById(options?: any): AxiosPromise<CardResponse> {
            return localVarFp.updateCardById(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardsApi - object-oriented interface
 * @export
 * @class CardsApi
 * @extends {BaseAPI}
 */
export class CardsApi extends BaseAPI {
    /**
     * 
     * @summary Delete card by id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public deleteCardById(options?: RawAxiosRequestConfig) {
        return CardsApiFp(this.configuration).deleteCardById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get card by id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public getCardById(options?: RawAxiosRequestConfig) {
        return CardsApiFp(this.configuration).getCardById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get card stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public getCardStats(options?: RawAxiosRequestConfig) {
        return CardsApiFp(this.configuration).getCardStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all cards
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public getCards(options?: RawAxiosRequestConfig) {
        return CardsApiFp(this.configuration).getCards(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new card
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public postCard(options?: RawAxiosRequestConfig) {
        return CardsApiFp(this.configuration).postCard(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update card by id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public updateCardById(options?: RawAxiosRequestConfig) {
        return CardsApiFp(this.configuration).updateCardById(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FightsApi - axios parameter creator
 * @export
 */
export const FightsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Simulate a fight
         * @summary Fight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fightPokemon: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cards/{attacker}/{defender}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FightsApi - functional programming interface
 * @export
 */
export const FightsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FightsApiAxiosParamCreator(configuration)
    return {
        /**
         * Simulate a fight
         * @summary Fight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fightPokemon(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FightResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fightPokemon(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FightsApi.fightPokemon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FightsApi - factory interface
 * @export
 */
export const FightsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FightsApiFp(configuration)
    return {
        /**
         * Simulate a fight
         * @summary Fight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fightPokemon(options?: any): AxiosPromise<FightResponse> {
            return localVarFp.fightPokemon(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FightsApi - object-oriented interface
 * @export
 * @class FightsApi
 * @extends {BaseAPI}
 */
export class FightsApi extends BaseAPI {
    /**
     * Simulate a fight
     * @summary Fight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FightsApi
     */
    public fightPokemon(options?: RawAxiosRequestConfig) {
        return FightsApiFp(this.configuration).fightPokemon(options).then((request) => request(this.axios, this.basePath));
    }
}



